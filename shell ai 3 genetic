{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"shell ai 3 genetic","provenance":[{"file_id":"1_VweW7TTrGw3w4c1mf7ZAM_L3GR1mugg","timestamp":1600753619683},{"file_id":"1snBSfmFGinhAUpjpbcCRL1phVav8N3Qq","timestamp":1600595744445}],"collapsed_sections":[],"authorship_tag":"ABX9TyMIlvPORODGBsZ9C1erwqTn"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"yJTmXYjhtyjc","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600753683940,"user_tz":-330,"elapsed":1000,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}}},"source":["import os\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"W-pNw4yAt652","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600753685384,"user_tz":-330,"elapsed":740,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}}},"source":["from Farm_Evaluator_Vec import *"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"BViBAZFCt9rD","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600753686447,"user_tz":-330,"elapsed":712,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}}},"source":["'''preprocessing to compute AEP'''\n","\n","# Turbine Specifications.\n","# -**-SHOULD NOT BE MODIFIED-**-\n","turb_specs    =  {   \n","                     'Name': 'Anon Name',\n","                     'Vendor': 'Anon Vendor',\n","                     'Type': 'Anon Type',\n","                     'Dia (m)': 100,\n","                     'Rotor Area (m2)': 7853,\n","                     'Hub Height (m)': 100,\n","                     'Cut-in Wind Speed (m/s)': 3.5,\n","                     'Cut-out Wind Speed (m/s)': 25,\n","                     'Rated Wind Speed (m/s)': 15,\n","                     'Rated Power (MW)': 3\n","                 }\n","turb_diam      =  turb_specs['Dia (m)']\n","turb_rad       =  turb_diam/2 \n","\n","# turb_coords   =  getTurbLoc(r'..\\Shell_Hackathon Dataset\\turbine_loc_test.csv')\n","# power_curve   =  loadPowerCurve('..\\Shell_Hackathon Dataset\\power_curve.csv')\n","# wind_inst_freq =  binWindResourceData(r'..\\Shell_Hackathon Dataset\\Wind Data\\wind_data_2007.csv')   \n","power_curve   =  loadPowerCurve('./power_curve.csv')\n","wind_inst_freq =  binWindResourceData('./wind_data_2007.csv')   \n","\n","n_wind_instances, cos_dir, sin_dir, wind_sped_stacked, C_t = preProcessing(power_curve)\n","\n","\n","def AEP_simp(turb_coords,print_=0):\n","#     checkConstraints(turb_coords, turb_diam)\n","\n","    #print('Calculating AEP......')        \n","    AEP = getAEP(turb_rad, turb_coords, power_curve, wind_inst_freq, \n","              n_wind_instances, cos_dir, sin_dir, wind_sped_stacked, C_t) \n","    if print_:\n","        print('Total power produced by the wind farm is: ', \"%.12f\"%(AEP), 'GWh')\n","    return AEP"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"-XZsaBtct9nk","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600755590715,"user_tz":-330,"elapsed":1051,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}}},"source":["def check_inc_violation(pts,point):\n","    '''check if adding new point will casue an violation'''\n","    x,y = point\n","    if x<50 or x>3950 or y<50 or y>3950:\n","        return 1\n","    for x0,y0 in pts:\n","        if (x0-x)**2 + (y0-y)**2 < 400**2:\n","            return 1\n","    return 0\n","\n","def to_csv(arr,filename='turbinesrand.csv'):\n","    '''convert the locations into a csv file'''\n","    df = pd.DataFrame(arr)\n","    df = df.rename(columns = {0:'x',1:'y'})\n","    df.to_csv(filename,index=False)\n","\n","\n","def get_random_turb_locations():\n","    '''generate a random configuration that does not violate the constraints'''\n","    locs = []\n","    locs.append(np.random.randint(size=2,low=50,high=3950))\n","    for i in range(49):\n","        while True:\n","            point = np.random.randint(size=2,low=50,high=3950)\n","            if not check_inc_violation(locs,point):\n","                locs.append(point)\n","                break\n","    return np.array(locs)\n","    \n","def check_constraint_violation(pts):\n","    for i in range(len(pts)):\n","        x0,y0 = pts[i]\n","        if x0<50 or x0>3950 or y0<50 or y0>3950:\n","            return 1\n","        for j in range(i+1,len(pts)):\n","            x1,y1 = pts[j]\n","            if (x0-x1)**2 + (y0-y1)**2 < 400**2:\n","                return 1\n","    return 0\n","\n","def plot_constraint_violations(pts):\n","    for i in range(len(pts)):\n","        x0,y0 = pts[i]\n","        if x0<50 or x0>3950 or y0<50 or y0>3950:\n","            #plt.scatter(x0,y0,'r')\n","            print(x0,y0)\n","        for j in range(i+1,len(pts)):\n","            x1,y1 = pts[j]\n","            if (x0-x1)**2 + (y0-y1)**2 < 400**2:\n","                plt.plot([x0,x1],[y0,y1],'r')\n","\n","def plot_turbine_locations(locs):\n","    '''visualize the turbine locations'''\n","    corners = np.array([[50,0],[50,3950],[3950,50],[3950,3950]])\n","    pts_list = np.vstack([locs , corners])\n","    x,y  =  [i[0] for i in pts_list], [i[1] for i in pts_list]\n","    plt.scatter(x,y)\n","\n","    plot_constraint_violations(locs)\n","    plt.show()"],"execution_count":66,"outputs":[]},{"cell_type":"code","metadata":{"id":"TDTQHH4Nt9ls","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600753692318,"user_tz":-330,"elapsed":666,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}}},"source":["def move(turbine_coords,index=0,maxdist=4000,diststep=100):\n","    '''move a selected turbine to different positions and\n","    return the max AEP position'''\n","    tx,ty = turbine_coords[index]\n","    maxx = (AEP_simp(turbine_coords),tx,ty)\n","    for dist in range(10,maxdist,diststep):\n","        #print(dist)\n","        for drct in np.linspace(0,2*np.pi,36,endpoint=False):\n","            dx,dy = dist*np.cos(drct), dist*np.sin(drct)\n","            #print(dx,dy)\n","            point = [tx + dx, ty + dy]\n","            if check_inc_violation(turbine_coords[:index],point) or \\\n","                check_inc_violation(turbine_coords[index+1:],point):\n","                continue\n","#             turbine_coords[index][0], turbine_coords[index][1] = point\n","            turbine_coords[index][0], turbine_coords[index][1] = point\n","            AEP = AEP_simp(turbine_coords)\n","            #print(AEP)\n","            if AEP > maxx[0]:\n","                maxx = (AEP,*point)\n","    return maxx\n","\n"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"K0VRer5P6cAF","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600753692913,"user_tz":-330,"elapsed":696,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}}},"source":["def move_sqr(turbine_coords,index=0,maxdist=4000,diststep=100):\n","    '''move a selected turbine to different positions and\n","    return the max AEP position'''\n","    tx,ty = turbine_coords[index]\n","    maxx = (AEP_simp(turbine_coords),tx,ty)\n","    for dx in range(10,maxdist,diststep):\n","        for dy in range(10,maxdist,diststep):\n","            #print(dx,dy)\n","            point = [tx + dx, ty + dy]\n","            if check_inc_violation(turbine_coords[:index],point) or \\\n","                check_inc_violation(turbine_coords[index+1:],point):\n","                continue\n","#             turbine_coords[index][0], turbine_coords[index][1] = point\n","            turbine_coords[index][0], turbine_coords[index][1] = point\n","            AEP = AEP_simp(turbine_coords)\n","            #print(AEP)\n","            if AEP > maxx[0]:\n","                maxx = (AEP,*point)\n","    return maxx\n"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"-pQfTpqSmPEd","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600753694927,"user_tz":-330,"elapsed":954,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}}},"source":["#simple_init_configuration\n","x,y = np.ogrid[50:3950:10j,50:3950:5j]\n","locs0 = np.array([[i,j] for i in x.ravel() for j in y.ravel()])\n","# print(x,y,locs0)\n","del x;del y"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"7Zuq6vgft9ju","colab_type":"code","colab":{}},"source":["locs0 = get_random_turb_locations()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HI8Fc4qKt9hf","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600753698636,"user_tz":-330,"elapsed":1190,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}}},"source":["locs1 = locs0.copy()\n","# locs1 = locs_2.copy()"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"cqmGJxSFt9ff","colab_type":"code","colab":{}},"source":["'''try moving each of the turbines'''\n","for _ in range(3):\n","    order = np.arange(50)\n","    np.random.shuffle(order)\n","    print(_)\n","    for ind,index in enumerate(order):\n","        maxAEP,x,y = move(locs1,index,3000,100)\n","        #maxAEP,x,y = move_sqr(locs1,index,4000,50)\n","        print(ind,'\\t',index,'\\t',maxAEP)\n","        locs1[index] = x,y"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bx3ZlyDNoxB7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1600753702514,"user_tz":-330,"elapsed":1056,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}},"outputId":"e830a7ff-85a3-4945-fd90-3301561d4ffd"},"source":["plot_turbine_locations(locs1);print(AEP_simp(np.array(locs1)));#to_csv(locs1,'iter_turb1.csv')"],"execution_count":9,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["532.5017614746093\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"615BgMQut9dd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1600514679284,"user_tz":-330,"elapsed":1123,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}},"outputId":"c9409560-a4b3-4705-de14-1874eb580072"},"source":["plot_turbine_locations(locs1);print(AEP_simp(np.array(locs1)));#to_csv(locs1,'iter_turb1.csv')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["532.5017614746093\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jimCVmpzt9bn","colab_type":"code","colab":{}},"source":["# to_csv(locs1,'/content/iter_turb_xo_1.csv')\n","# to_csv(locs1,'/content/iter_turb_xo_2.csv')\n","# to_csv(locs1,'/content/iter_turb_xo_3.csv')\n","# to_csv(locs1,'/content/iter_turb2.csv')\n","# to_csv(locs1,'/content/iter_turb3.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YV9n1gONt9Zg","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SvBB9ilct9X3","colab_type":"code","colab":{}},"source":["'''reducting the 4k x 4k grid into a 9x9 grid'''\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gsK7R0Dh8tSF","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600755596652,"user_tz":-330,"elapsed":961,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}}},"source":["class organism(object):\n","    def __init__(self,gene=None):\n","        if gene is None:\n","            while True:\n","                self.gene = get_random_turb_locations()\n","                if not check_constraint_violation(self.gene):\n","                    break\n","        else:\n","            self.gene = gene\n","    \n","    def get_locs(self):\n","        return self.gene\n","\n","    def mutate_gene(self,_copy=True):\n","        while True:\n","            index = np.random.randint(0,50)\n","            dist  = np.random.randint(0,4000)\n","            drct  = np.random.randint(0,360)*np.pi/180\n","            dx,dy = dist*np.cos(drct), dist*np.sin(drct)\n","            point = [self.gene[index][0]+dx,self.gene[index][1]+dy]\n","            if check_inc_violation(self.gene[:index],point) or \\\n","                check_inc_violation(self.gene[index+1:],point):\n","                continue\n","            \n","            if _copy:\n","                gene = self.gene.copy()\n","                gene[index] = point\n","                return organism(gene=gene)\n","    \n","    def crossover(self,other):\n","        gene1 = self.gene.copy()\n","        gene2 = other.gene.copy()\n","        while True:\n","            np.random.shuffle(gene1)\n","            np.random.shuffle(gene2)\n","            frac = np.random.randint(20,30)\n","            gene = np.vstack([gene1[:frac], gene2[:50-frac]])\n","            # print(frac,50-frac)\n","            # print(gene.shape,gene1[:frac].shape, gene2[:50-frac].shape)\n","            if check_constraint_violation(gene):\n","                continue\n","            return organism(gene=gene)"],"execution_count":67,"outputs":[]},{"cell_type":"code","metadata":{"id":"_mvAA7mTDJn2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":408},"executionInfo":{"status":"error","timestamp":1600755637381,"user_tz":-330,"elapsed":40679,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}},"outputId":"4f177703-9006-4acf-a93b-8e5eb262f92e"},"source":["o1,o2 = [organism() for i in range(2)]\n","print(len(o1.get_locs()))\n","print(len(o2.get_locs()))\n","o3 = o1.crossover(o2)\n","print(check_constraint_violation(o3.gene))\n","print(checkConstraints(o3.gene, 100))\n","print(len(o3.get_locs()))\n","o5 = o1.mutate_gene()\n","print(len(o5.get_locs()))"],"execution_count":68,"outputs":[{"output_type":"stream","text":["50\n","50\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-68-a2177b87f3ed>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_locs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_locs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mo3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mo1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcrossover\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcheck_constraint_violation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgene\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcheckConstraints\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mo3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgene\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-67-be262b76add1>\u001b[0m in \u001b[0;36mcrossover\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     37\u001b[0m             \u001b[0;31m# print(frac,50-frac)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m             \u001b[0;31m# print(gene.shape,gene1[:frac].shape, gene2[:50-frac].shape)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mcheck_constraint_violation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgene\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m                 \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0morganism\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgene\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgene\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-66-3bb79e0ace2f>\u001b[0m in \u001b[0;36mcheck_constraint_violation\u001b[0;34m(pts)\u001b[0m\n\u001b[1;32m     34\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m             \u001b[0mx1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpts\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mx0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mx1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my0\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0my1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m400\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"u95vEAX9t9VZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":299},"executionInfo":{"status":"ok","timestamp":1600755430338,"user_tz":-330,"elapsed":1125,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}},"outputId":"dd47bbf2-dcf6-481d-9c29-891fdd6d765b"},"source":["# locs_2 = organism().get_locs()\n","locs_2 = o3.get_locs()\n","print(len(locs_2),locs_2.shape)\n","plot_turbine_locations(locs_2);print(AEP_simp(np.array(locs_2)));#to_csv(locs1,'iter_turb1.csv')"],"execution_count":64,"outputs":[{"output_type":"stream","text":["50 (50, 2)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["496.70136337280275\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LMf4pIX-t-cT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":231},"executionInfo":{"status":"error","timestamp":1600754639954,"user_tz":-330,"elapsed":1443,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}},"outputId":"a6aba35f-6758-45e4-e963-acd1ae0b9abd"},"source":["x,y = 50,1\n","gen0 = [organism() for i in range(x)]#generation 0\n","gen_now = gen0\n","for gen_cnt in range(20):\n","    # aeps = [[AEP_simp(i),i] for i in map(gene_to_locs,gen_now)]\n","    gen_now.extend([gen_now[i].mutate_gene() for i in range(x) for j in range(3)])\n","    for i in range(5*x):\n","        a,b = -1,-1\n","        while a==b:\n","            a,b = np.random.randint(0,x), np.random.randint(0,x)\n","        gen_now.extend( gen_now[a].du_crossover(gen_now[b]) )\n","    \n","    aeps = [[AEP_simp(i.get_locs()),i] for i in gen_now] \n","    aeps.sort(reverse=0,key=lambda x:x[0])\n","    dist = np.array([i[0] for i in aeps])\n","    print(dist.min(),dist.mean(),dist.var(),dist.max())\n","    if dist.var()<1e-3:\n","        break\n","    gen_now = [i[1] for i in aeps[:(x-y)]] + [organism() for i in range(y)]"],"execution_count":15,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-1866e628f0a7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m         \u001b[0mgen_now\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mgen_now\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdu_crossover\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgen_now\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0maeps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mAEP_simp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_locs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgen_now\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'organism' object has no attribute 'du_crossover'"]}]},{"cell_type":"code","metadata":{"id":"BgxrwBN10vnK","colab_type":"code","colab":{}},"source":["for ind in range(len(locsx[:5])):\n","    plot_turbine_locations(locsx[ind]);print(AEP_simp(np.array(locsx[ind])));"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J5gk1lg104Io","colab_type":"code","colab":{}},"source":["def move_turbine_randomly(locs):\n","    while True:\n","        index = np.random.randint(0,50)\n","        angle = np.random.randint(0,360)/360*np.pi\n","        r     = np.random.randint(0,4000)\n","        dx,dy = r*np.cos(angle), r*np.sin(angle)\n","        \n","        point = [locs[index][0] + dx, locs[index][1] + dy]\n","        # print(dx,dy)\n","        if check_inc_violation(locs[:index],point) or \\\n","            check_inc_violation(locs[index+1:],point):\n","            continue\n","        locs_copy = locs.copy()\n","        locs_copy[index][0] += dx\n","        locs_copy[index][1] += dy\n","        break\n","    return locs_copy"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"slA6q1904Vjr","colab_type":"code","colab":{}},"source":["locs_r = move_turbine_randomly(locs0)\n","print(np.hstack([locs0,locs_r]))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KIk-33GJqd1L","colab_type":"code","colab":{}},"source":["# locs1 = locsx[0].copy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lRlZZm2WGDbx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":357},"executionInfo":{"status":"ok","timestamp":1600516543336,"user_tz":-330,"elapsed":90322,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}},"outputId":"cf4c5bf5-b1d7-4377-cbef-747cd6c3f0dc"},"source":["gen_now = [[AEP_simp(locs1),locs1.copy()]]\n","for gen_cnt in range(10):\n","    print(gen_cnt)\n","    nxt_gen = []\n","    for aep1,locs in gen_now:\n","        for child in range(3):\n","            locs1_moved = move_turbine_randomly(locs1)\n","            nxt_gen.append([AEP_simp(locs1_moved),locs1_moved])\n","    gen_now.extend(nxt_gen)\n","    gen_now.sort(key=lambda x:x[0], reverse=True)\n","    dist = np.array([i[0] for i in gen_now])\n","    print(dist.min(),dist.mean(),dist.var(),dist.max(),len(dist))\n","    gen_now = gen_now[:100]  "],"execution_count":null,"outputs":[{"output_type":"stream","text":["0\n","524.1442327880859 524.3235219955444 0.04268344162047872 524.6499952697754 4\n","1\n","523.5993392944335 524.2244308948517 0.09590087607677418 524.7105798339844 16\n","2\n","523.4994232177735 524.1832097697259 0.10628143849764635 524.8366946411132 64\n","3\n","523.2110032653809 524.2133168238402 0.09687846746894929 524.8366946411132 256\n","4\n","522.9932263183593 524.2897356582641 0.08602632164309551 524.8366946411132 400\n","5\n","523.1159660339356 524.2970487464904 0.11751032009899771 524.9879388427735 400\n","6\n","523.1318724060059 524.3425322822571 0.09639551464891806 524.9879388427735 400\n","7\n","523.1078791809082 524.3204202529907 0.11939007356616826 524.9879388427735 400\n","8\n","523.2590565490723 524.3097299011231 0.12654009278475528 524.9879388427735 400\n","9\n","523.259624633789 524.32629324646 0.12484306365381112 524.9879388427735 400\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C0yZrHWT4XL7","colab_type":"code","colab":{}},"source":["'''try moving each of the turbines'''\n","for _ in range(3):\n","    order = np.arange(50)\n","    np.random.shuffle(order)\n","    print(_)\n","    for ind,index in enumerate(order):\n","        maxAEP,x,y = move(locs1,index,4000,50)\n","        #maxAEP,x,y = move_sqr(locs1,index,4000,50)\n","        print(ind,'\\t',index,'\\t',maxAEP)\n","        locs1[index] = x,y\n","    plot_turbine_locations(locs1);print(AEP_simp(np.array(locs1)));to_csv(locs1,'iter_turb_sep19_v1.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YjUf9WMCo2DD","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1600514429259,"user_tz":-330,"elapsed":1066,"user":{"displayName":"Pothuganti Harshavardhan ee17b061","photoUrl":"","userId":"01988186262781737283"}},"outputId":"1cd43da8-21ff-454f-9bec-a0c68500c8b2"},"source":[" plot_turbine_locations(locs1);print(AEP_simp(np.array(locs1)));#to_csv(locs1,'iter_turb1.csv')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["524.458650970459\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ujC86HUX1mrq","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}